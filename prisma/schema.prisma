generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  username              String                @unique
  password              String
  firstName             String
  lastName              String
  phoneNumber           String?
  address               String?
  userType              UserType
  isActive              Boolean               @default(true)
  dateOfBirth           DateTime?
  governmentId          String?               @unique
  idType                String?
  barangayResidence     String?
  occupation            String?
  emergencyContact      String?
  emergencyContactPhone String?
  reasonForRegistration String?
  isVerified            Boolean               @default(false)
  verificationToken     String?
  verificationExpiry    DateTime?
  verifiedAt            DateTime?
  verifiedBy            String?
  registrationIp        String?
  lastLoginAt           DateTime?
  lastLoginIp           String?
  loginAttempts         Int                   @default(0)
  lockedUntil           DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  fareCalculations      FareCalculation[]
  handledIncidents      Incident[]            @relation("HandledBy")
  reportedIncidents     Incident[]            @relation("ReportedBy")
  uploadedEvidence      Evidence[]            @relation("EvidenceUploader")
  reviewedEvidence      Evidence[]            @relation("EvidenceReviewer")
  verificationLogs      UserVerificationLog[]

  @@map("users")
}

model Vehicle {
  id                 String            @id @default(cuid())
  plateNumber        String            @unique
  vehicleType        VehicleType
  make               String
  model              String
  year               Int
  color              String
  capacity           Int
  ownerName          String
  ownerContact       String
  driverName         String?
  driverLicense      String?
  isActive           Boolean           @default(true)
  registrationExpiry DateTime
  insuranceExpiry    DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  fareCalculations   FareCalculation[]
  incidents          Incident[]
  permit             Permit?

  @@map("vehicles")
}

model Incident {
  id            String         @id @default(cuid())
  incidentType  IncidentType
  description   String
  location      String
  coordinates   String?
  reportedById  String
  handledById   String?
  vehicleId     String?
  vehicleType   VehicleType?
  driverLicense String?
  plateNumber   String?
  status        IncidentStatus @default(PENDING)
  evidenceUrls  String[]
  penaltyAmount Decimal?
  remarks       String?
  ticketNumber  String?        @unique
  incidentDate  DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  resolvedAt    DateTime?
  handledBy     User?          @relation("HandledBy", fields: [handledById], references: [id])
  reportedBy    User           @relation("ReportedBy", fields: [reportedById], references: [id])
  vehicle       Vehicle?       @relation(fields: [vehicleId], references: [id])
  evidence      Evidence[]

  @@map("incidents")
}

model Evidence {
  id          String        @id @default(cuid())
  incidentId  String
  fileName    String
  fileUrl     String
  fileType    EvidenceType
  fileSize    Int?
  uploadedBy  String
  status      EvidenceStatus @default(PENDING_REVIEW)
  reviewedBy  String?
  reviewedAt  DateTime?
  remarks     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  incident    Incident      @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  uploader    User          @relation("EvidenceUploader", fields: [uploadedBy], references: [id])
  reviewer    User?         @relation("EvidenceReviewer", fields: [reviewedBy], references: [id])

  @@map("evidence")
}

model FareCalculation {
  id              String   @id @default(cuid())
  userId          String?
  vehicleId       String?
  fromLocation    String
  toLocation      String
  distance        Decimal
  calculatedFare  Decimal
  actualFare      Decimal?
  calculationType String
  routeData       String?
  createdAt       DateTime @default(now())
  user            User?    @relation(fields: [userId], references: [id])
  vehicle         Vehicle? @relation(fields: [vehicleId], references: [id])

  @@map("fare_calculations")
}

model Route {
  id          String   @id @default(cuid())
  name        String
  description String?
  waypoints   String
  distance    Decimal
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("routes")
}

model Location {
  id          String       @id @default(cuid())
  name        String       @unique
  type        LocationType
  coordinates String
  barangay    String?
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("locations")
}

model UserVerificationLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  performedBy String
  reason      String?
  evidence    String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_verification_logs")
}

model AdminUserCreation {
  id            String    @id @default(cuid())
  requestedBy   String
  userType      UserType
  firstName     String
  lastName      String
  phoneNumber   String
  department    String?
  position      String?
  employeeId    String?
  notes         String?
  isActive      Boolean   @default(false)
  approvedBy    String?
  approvedAt    DateTime?
  createdUserId String?
  createdAt     DateTime  @default(now())

  @@map("admin_user_creations")
}

model Permit {
  id                 String       @id @default(cuid())
  vehicleId          String       @unique
  permitPlateNumber  String       @unique
  driverFullName     String
  vehicleType        VehicleType
  issuedDate         DateTime     @default(now())
  expiryDate         DateTime
  status             PermitStatus @default(ACTIVE)
  remarks            String?
  encodedBy          String
  encodedAt          DateTime     @default(now())
  lastUpdatedBy      String?
  lastUpdatedAt      DateTime?
  renewalHistory     PermitRenewal[]
  vehicle            Vehicle      @relation(fields: [vehicleId], references: [id])
  
  @@map("permits")
}

model PermitRenewal {
  id            String   @id @default(cuid())
  permitId      String
  previousExpiry DateTime
  newExpiry      DateTime
  renewedBy     String
  renewedAt     DateTime @default(now())
  notes         String?
  permit        Permit   @relation(fields: [permitId], references: [id], onDelete: Cascade)
  
  @@map("permit_renewals")
}

enum UserType {
  ADMIN
  DATA_ENCODER
  ENFORCER
  PUBLIC
}

enum VehicleType {
  JEEPNEY
  TRICYCLE
  HABAL_HABAL
  MULTICAB
  BUS
  VAN
}

enum IncidentType {
  FARE_OVERCHARGE
  FARE_UNDERCHARGE
  RECKLESS_DRIVING
  VEHICLE_VIOLATION
  ROUTE_VIOLATION
  OTHER
}

enum IncidentStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}

enum LocationType {
  BARANGAY
  LANDMARK
  URBAN
  RURAL
}

enum PermitStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
}

enum EvidenceType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum EvidenceStatus {
  PENDING_REVIEW
  VERIFIED
  REJECTED
  REQUIRES_ADDITIONAL
}
